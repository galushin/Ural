/**
Ближайшие цели:

+ Аналоги средства из <numeric> стандартной библиотеки С++

* Аналоги средства из <iterator> стандартной библиотеки С++
* Аналоги средства из <functional> стандартной библиотеки С++
* Аналоги средства из <algorithm> стандартной библиотеки С++

* возвращаемое значение rotate(s1, s2) и inplace_stable_partition
* Дискретное распределение по Уолкеру

* Полная документация
--------------------------------------------------------------------------------
Дальнейшие цели:

* Разобраться с иерархией категорий последовательностей. В частности, от чего
должен наследовать random_access_traversal_tag
* Определить, должен ли SinglePassSequence быть EqualityComparable
* Аналоги remove и remove_if, если копирующие версии имеют большую сложность,
чем версии, работающие на месте.
* Распаковка кортежа в список аргументов функции
* Сопостовимое быстродействие со стандартной библиотекой (в частности, за счёт
специализированных алгоритмов copy).
* Оптимизация inplace_merge, equal_range, nth_element, rotate(s1, s2),
partition, stable_partition
* Поддержка разных компиляторов (Clang, VS)
* универсальный интерфейс для tuple, pair, complex, compressed_pair
* минимизация размеров последовательностей
* семантические ограничения: сортированная последовательность, отношение порядка
и т.д.
* Контейнеры, знающие о последовательностях
* Средства стандартной библиотеки C++14, отсутствующие в C++11
* Аналоги функциональности библиотек Boost.Range и Boost.Iterator
* Интеграция с Boost.Range и Boost.Iterator
* Аналоги алгоритмов стандартных библиотек других императивных языков (D, Java)
* Неизменяемые (чисто функциональные) структуры данных и алгоритмы для работы
с ними
* Параллельная реализация алгоритмов
* Выразить is_sorted_until через adjacent_find?
* преобразование строковых литералов в последовательности - проблема в ноле в
конце строки

Вспомогательные цели:
* трасировщики для операторов (например, для <) - модульные трассировщики

ОБОСНОВАНИЕ

Алгоритмы реализованы в виде двуслойной схемы. Первый слой взаимодействует с
пользователем и преобразует аргументы, переданные пользователем: контейнеры
в последовательности, указатели на функции-члены в функциональные объекты и т.д.
Второй слой не должен использоваться клиентами непосредственно, в нём считается,
что все аргументы преобразованы в готовую к использованию форму.

Такой подход выбран, чтобы избежать комбинаторного возрастания количества
алгоритмов. Можно было бы определить одну версию алгоритма для
последовательностей, а другую --- для контейнеров, но этот подход не
масшабируется: поддержка возможности передавать в качестве функциональных
объектов указатели на функции-члены потребует либо преобразования на стороне
клиента, либо удваивания количества алгоритмов.
*/
